{
  "openapi": "3.0.0",
  "info": {
    "title": "DTriviaAIOnChain API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://dtaioc-aimodel-1.onrender.com"
    }
  ],
  "paths": {
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/MAX_MINT_PER_WALLET": {
      "get": {
        "summary": "Call DTAIOCToken.MAX_MINT_PER_WALLET",
        "description": "Retrieve the maximum number of tokens that can be minted per wallet from the DTAIOCToken contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "maxMintPerWallet": {
                      "type": "string",
                      "description": "Maximum number of tokens that can be minted per wallet (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/MAX_SUPPLY": {
      "get": {
        "summary": "Call DTAIOCToken.MAX_SUPPLY",
        "description": "Retrieve the maximum supply of tokens from the DTAIOCToken contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "maxSupply": {
                      "type": "string",
                      "description": "Maximum supply of tokens (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/MIN_BALANCE_FOR_MINT": {
      "get": {
        "summary": "Call DTAIOCToken.MIN_BALANCE_FOR_MINT",
        "description": "Retrieve the minimum balance required for minting from the DTAIOCToken contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "minBalanceForMint": {
                      "type": "string",
                      "description": "Minimum balance required for minting (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/allowance": {
      "get": {
        "summary": "Call DTAIOCToken.allowance",
        "description": "Retrieve the amount of tokens an owner has allowed a spender to use from the DTAIOCToken contract.",
        "parameters": [
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "required": true,
            "description": "The address of the token owner."
          },
          {
            "in": "query",
            "name": "spender",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "required": true,
            "description": "The address of the spender."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "allowance": {
                      "type": "string",
                      "description": "Amount of tokens the spender is allowed to use (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/approve": {
      "post": {
        "summary": "Call DTAIOCToken.approve",
        "description": "Approve a spender to use a specified amount of tokens from the DTAIOCToken contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "spender": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the spender."
                  },
                  "value": {
                    "type": "string",
                    "description": "The amount of tokens to approve (uint256)."
                  }
                },
                "required": ["spender", "value"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the approval was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/decimals": {
      "get": {
        "summary": "Call DTAIOCToken.decimals",
        "description": "Retrieve the number of decimals used by the DTAIOCToken contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "decimals": {
                      "type": "integer",
                      "description": "The number of decimals for the token (uint8)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/mintedAmount": {
      "get": {
        "summary": "Call DTAIOCToken.mintedAmount",
        "description": "Retrieve the amount of tokens minted by a specific address from the DTAIOCToken contract.",
        "parameters": [
          {
            "in": "query",
            "name": "address",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "required": true,
            "description": "The address to check minted amount for."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mintedAmount": {
                      "type": "string",
                      "description": "The amount of tokens minted by the address (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/mintingPaused": {
      "get": {
        "summary": "Call DTAIOCToken.mintingPaused",
        "description": "Check if minting is paused in the DTAIOCToken contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mintingPaused": {
                      "type": "boolean",
                      "description": "Indicates if minting is paused."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/name": {
      "get": {
        "summary": "Call DTAIOCToken.name",
        "description": "Retrieve the name of the token from the DTAIOCToken contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the token."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/owner": {
      "get": {
        "summary": "Call DTAIOCToken.owner",
        "description": "Retrieve the owner address of the DTAIOCToken contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "owner": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "description": "The address of the contract owner."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/pauseMinting": {
      "post": {
        "summary": "Call DTAIOCToken.pauseMinting",
        "description": "Pause minting in the DTAIOCToken contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the pause was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/renounceOwnership": {
      "post": {
        "summary": "Call DTAIOCToken.renounceOwnership",
        "description": "Renounce ownership of the DTAIOCToken contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the ownership renouncement was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/symbol": {
      "get": {
        "summary": "Call DTAIOCToken.symbol",
        "description": "Retrieve the symbol of the token from the DTAIOCToken contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "symbol": {
                      "type": "string",
                      "description": "The symbol of the token."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/totalMinted": {
      "get": {
        "summary": "Call DTAIOCToken.totalMinted",
        "description": "Retrieve the total amount of tokens minted from the DTAIOCToken contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalMinted": {
                      "type": "string",
                      "description": "The total amount of tokens minted (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/totalSupply": {
      "get": {
        "summary": "Call DTAIOCToken.totalSupply",
        "description": "Retrieve the total supply of tokens in circulation from the DTAIOCToken contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalSupply": {
                      "type": "string",
                      "description": "The total supply of tokens (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/transfer": {
      "post": {
        "summary": "Call DTAIOCToken.transfer",
        "description": "Transfer a specified amount of tokens to a recipient address in the DTAIOCToken contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The recipient address."
                  },
                  "value": {
                    "type": "string",
                    "description": "The amount of tokens to transfer (uint256)."
                  }
                },
                "required": ["to", "value"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the transfer was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/transferFrom": {
      "post": {
        "summary": "Call DTAIOCToken.transferFrom",
        "description": "Transfer tokens from one address to another using an allowance in the DTAIOCToken contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address to transfer tokens from."
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The recipient address."
                  },
                  "value": {
                    "type": "string",
                    "description": "The amount of tokens to transfer (uint256)."
                  }
                },
                "required": ["from", "to", "value"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the transfer was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/transferOwnership": {
      "post": {
        "summary": "Call DTAIOCToken.transferOwnership",
        "description": "Transfer ownership of the DTAIOCToken contract to a new owner (only callable by the current owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newOwner": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the new owner."
                  }
                },
                "required": ["newOwner"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the ownership transfer was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/unpauseMinting": {
      "post": {
        "summary": "Call DTAIOCToken.unpauseMinting",
        "description": "Unpause minting in the DTAIOCToken contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the unpause was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/batchMint": {
      "post": {
        "summary": "Call DTAIOCToken.batchMint",
        "description": "Mint tokens to multiple recipients in a single transaction in the DTAIOCToken contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipients": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$"
                    },
                    "description": "Array of recipient addresses."
                  },
                  "amounts": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of amounts to mint for each recipient (uint256)."
                  }
                },
                "required": ["recipients", "amounts"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the batch minting was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/approve": {
      "post": {
        "summary": "Call DTAIOCNFT.approve",
        "description": "Approve an address to transfer a specific NFT token from the DTAIOCNFT contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address to approve for transferring the NFT."
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "The ID of the NFT token to approve (uint256)."
                  }
                },
                "required": ["to", "tokenId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the approval was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/balanceOf": {
      "get": {
        "summary": "Call DTAIOCNFT.balanceOf",
        "description": "Retrieve the number of NFTs owned by a specific address in the DTAIOCNFT contract.",
        "parameters": [
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "required": true,
            "description": "The address to check the NFT balance for."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "type": "string",
                      "description": "The number of NFTs owned by the address (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/gameContract": {
      "get": {
        "summary": "Call DTAIOCNFT.gameContract",
        "description": "Retrieve the address of the game contract associated with the DTAIOCNFT contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "gameContract": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "description": "The address of the associated game contract."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/getApproved": {
      "get": {
        "summary": "Call DTAIOCNFT.getApproved",
        "description": "Retrieve the approved address for a specific NFT token in the DTAIOCNFT contract.",
        "parameters": [
          {
            "in": "query",
            "name": "tokenId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the NFT token (uint256)."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "approved": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "description": "The address approved to transfer the NFT token."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/isApprovedForAll": {
      "get": {
        "summary": "Call DTAIOCNFT.isApprovedForAll",
        "description": "Check if an operator is approved to manage all NFTs of an owner in the DTAIOCNFT contract.",
        "parameters": [
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "required": true,
            "description": "The address of the NFT owner."
          },
          {
            "in": "query",
            "name": "operator",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "required": true,
            "description": "The address of the operator."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "isApproved": {
                      "type": "boolean",
                      "description": "Indicates if the operator is approved for all NFTs."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/mintNFT": {
      "post": {
        "summary": "Call DTAIOCNFT.mintNFT",
        "description": "Mint a new NFT to a recipient with specified attributes in the DTAIOCNFT contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipient": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address to receive the NFT."
                  },
                  "gameId": {
                    "type": "string",
                    "description": "The ID of the associated game (uint256)."
                  },
                  "rank": {
                    "type": "string",
                    "description": "The rank associated with the NFT (uint256)."
                  },
                  "tokenURI": {
                    "type": "string",
                    "description": "The URI for the NFT metadata."
                  }
                },
                "required": ["recipient", "gameId", "rank", "tokenURI"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the NFT minting was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/name": {
      "get": {
        "summary": "Call DTAIOCNFT.name",
        "description": "Retrieve the name of the NFT collection from the DTAIOCNFT contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the NFT collection."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/owner": {
      "get": {
        "summary": "Call DTAIOCNFT.owner",
        "description": "Retrieve the owner address of the DTAIOCNFT contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "owner": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "description": "The address of the contract owner."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/ownerOf": {
      "get": {
        "summary": "Call DTAIOCNFT.ownerOf",
        "description": "Retrieve the owner of a specific NFT token in the DTAIOCNFT contract.",
        "parameters": [
          {
            "in": "query",
            "name": "tokenId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the NFT token (uint256)."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "owner": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "description": "The address of the NFT owner."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/renounceOwnership": {
      "post": {
        "summary": "Call DTAIOCNFT.renounceOwnership",
        "description": "Renounce ownership of the DTAIOCNFT contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the ownership renouncement was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/safeTransferFrom": {
      "post": {
        "summary": "Call DTAIOCNFT.safeTransferFrom",
        "description": "Safely transfer an NFT token from one address to another in the DTAIOCNFT contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address to transfer the NFT from."
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The recipient address."
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "The ID of the NFT token (uint256)."
                  },
                  "data": {
                    "type": "string",
                    "description": "Additional data to pass to the recipient (bytes)."
                  }
                },
                "required": ["from", "to", "tokenId", "data"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the transfer was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/setApprovalForAll": {
      "post": {
        "summary": "Call DTAIOCNFT.setApprovalForAll",
        "description": "Set or unset approval for an operator to manage all NFTs of the caller in the DTAIOCNFT contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operator": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the operator."
                  },
                  "approved": {
                    "type": "boolean",
                    "description": "Whether to approve or revoke the operator."
                  }
                },
                "required": ["operator", "approved"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the approval setting was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/setGameContract": {
      "post": {
        "summary": "Call DTAIOCNFT.setGameContract",
        "description": "Set the address of the game contract associated with the DTAIOCNFT contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "_gameContract": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the game contract."
                  }
                },
                "required": ["_gameContract"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the game contract setting was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/supportsInterface": {
      "get": {
        "summary": "Call DTAIOCNFT.supportsInterface",
        "description": "Check if the DTAIOCNFT contract supports a specific interface.",
        "parameters": [
          {
            "in": "query",
            "name": "interfaceId",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{8}$"
            },
            "required": true,
            "description": "The interface ID to check (bytes4)."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "supported": {
                      "type": "boolean",
                      "description": "Indicates if the interface is supported."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/symbol": {
      "get": {
        "summary": "Call DTAIOCNFT.symbol",
        "description": "Retrieve the symbol of the NFT collection from the DTAIOCNFT contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "symbol": {
                      "type": "string",
                      "description": "The symbol of the NFT collection."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/tokenURI": {
      "get": {
        "summary": "Call DTAIOCNFT.tokenURI",
        "description": "Retrieve the metadata URI for a specific NFT token in the DTAIOCNFT contract.",
        "parameters": [
          {
            "in": "query",
            "name": "tokenId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the NFT token (uint256)."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tokenURI": {
                      "type": "string",
                      "description": "The metadata URI for the NFT token."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/transferFrom": {
      "post": {
        "summary": "Call DTAIOCNFT.transferFrom",
        "description": "Transfer an NFT token from one address to another in the DTAIOCNFT contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address to transfer the NFT from."
                  },
                  "to": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The recipient address."
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "The ID of the NFT token (uint256)."
                  }
                },
                "required": ["from", "to", "tokenId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the transfer was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xFCadE10a83E0963C31e8F9EB1712AE4AeC422FD1/transferOwnership": {
      "post": {
        "summary": "Call DTAIOCNFT.transferOwnership",
        "description": "Transfer ownership of the DTAIOCNFT contract to a new owner (only callable by the current owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newOwner": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the new owner."
                  }
                },
                "required": ["newOwner"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the ownership transfer was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/distributeRewards": {
      "post": {
        "summary": "Call DTAIOCStaking.distributeRewards",
        "description": "Distribute rewards for a game to specified addresses in the DTAIOCStaking contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gameId": {
                    "type": "string",
                    "description": "The ID of the game (uint256)."
                  },
                  "creator": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the game creator."
                  },
                  "platform": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the platform."
                  },
                  "winners": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$"
                    },
                    "description": "Array of winner addresses."
                  }
                },
                "required": ["gameId", "creator", "platform", "winners"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the reward distribution was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/forfeitedStakes": {
      "get": {
        "summary": "Call DTAIOCStaking.forfeitedStakes",
        "description": "Retrieve the amount of forfeited stakes for a specific game in the DTAIOCStaking contract.",
        "parameters": [
          {
            "in": "query",
            "name": "gameId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the game (uint256)."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "forfeitedStakes": {
                      "type": "string",
                      "description": "The amount of forfeited stakes (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/gameContract": {
      "get": {
        "summary": "Call DTAIOCStaking.gameContract",
        "description": "Retrieve the address of the game contract associated with the DTAIOCStaking contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "gameContract": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "description": "The address of the associated game contract."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/owner": {
      "get": {
        "summary": "Call DTAIOCStaking.owner",
        "description": "Retrieve the owner address of the DTAIOCStaking contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "owner": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "description": "The address of the contract owner."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/pauseStaking": {
      "post": {
        "summary": "Call DTAIOCStaking.pauseStaking",
        "description": "Pause staking in the DTAIOCStaking contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the pause was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/renounceOwnership": {
      "post": {
        "summary": "Call DTAIOCStaking.renounceOwnership",
        "description": "Renounce ownership of the DTAIOCStaking contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the ownership renouncement was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/setGameContract": {
      "post": {
        "summary": "Call DTAIOCStaking.setGameContract",
        "description": "Set the address of the game contract associated with the DTAIOCStaking contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "_gameContract": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the game contract."
                  }
                },
                "required": ["_gameContract"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the game contract setting was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/stake": {
      "post": {
        "summary": "Call DTAIOCStaking.stake",
        "description": "Stake tokens for a specific game in the DTAIOCStaking contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gameId": {
                    "type": "string",
                    "description": "The ID of the game (uint256)."
                  },
                  "amount": {
                    "type": "string",
                    "description": "The amount of tokens to stake (uint256)."
                  }
                },
                "required": ["gameId", "amount"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the staking was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/stakingPaused": {
      "get": {
        "summary": "Call DTAIOCStaking.stakingPaused",
        "description": "Check if staking is paused in the DTAIOCStaking contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "stakingPaused": {
                      "type": "boolean",
                      "description": "Indicates if staking is paused."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/tokenContract": {
      "get": {
        "summary": "Call DTAIOCStaking.tokenContract",
        "description": "Retrieve the address of the token contract associated with the DTAIOCStaking contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tokenContract": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "description": "The address of the associated token contract."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/totalStaked": {
      "get": {
        "summary": "Call DTAIOCStaking.totalStaked",
        "description": "Retrieve the total amount of tokens staked for a specific game in the DTAIOCStaking contract.",
        "parameters": [
          {
            "in": "query",
            "name": "gameId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the game (uint256)."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalStaked": {
                      "type": "string",
                      "description": "The total amount of tokens staked (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/transferOwnership": {
      "post": {
        "summary": "Call DTAIOCStaking.transferOwnership",
        "description": "Transfer ownership of the DTAIOCStaking contract to a new owner (only callable by the current owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newOwner": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the new owner."
                  }
                },
                "required": ["newOwner"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the ownership transfer was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0xf5d48836E1FDf267294Ca6B1B6f3860c18eF75dC/unpauseStaking": {
      "post": {
        "summary": "Call DTAIOCStaking.unpauseStaking",
        "description": "Unpause staking in the DTAIOCStaking contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the unpause was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/creatorFee": {
      "get": {
        "summary": "Call DTAIOCGame.creatorFee",
        "description": "Retrieve the fee percentage for game creators in the DTAIOCGame contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "creatorFee": {
                      "type": "string",
                      "description": "The fee percentage for game creators (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/nftContract": {
      "get": {
        "summary": "Call DTAIOCGame.nftContract",
        "description": "Retrieve the address of the NFT contract associated with the DTAIOCGame contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nftContract": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "description": "The address of the associated NFT contract."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/owner": {
      "get": {
        "summary": "Call DTAIOCGame.owner",
        "description": "Retrieve the owner address of the DTAIOCGame contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "owner": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "description": "The address of the contract owner."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/platformFee": {
      "get": {
        "summary": "Call DTAIOCGame.platformFee",
        "description": "Retrieve the platform fee percentage in the DTAIOCGame contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "platformFee": {
                      "type": "string",
                      "description": "The platform fee percentage (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/renounceOwnership": {
      "post": {
        "summary": "Call DTAIOCGame.renounceOwnership",
        "description": "Renounce ownership of the DTAIOCGame contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the ownership renouncement was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/setCreatorFee": {
      "post": {
        "summary": "Call DTAIOCGame.setCreatorFee",
        "description": "Set the creator fee percentage in the DTAIOCGame contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "_creatorFee": {
                    "type": "string",
                    "description": "The new creator fee percentage (uint256)."
                  }
                },
                "required": ["_creatorFee"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the creator fee setting was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/setNFTContract": {
      "post": {
        "summary": "Call DTAIOCGame.setNFTContract",
        "description": "Set the address of the NFT contract associated with the DTAIOCGame contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "_nftContract": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the NFT contract."
                  }
                },
                "required": ["_nftContract"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the NFT contract setting was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/setPlatformFee": {
      "post": {
        "summary": "Call DTAIOCGame.setPlatformFee",
        "description": "Set the platform fee percentage in the DTAIOCGame contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "_platformFee": {
                    "type": "string",
                    "description": "The new platform fee percentage (uint256)."
                  }
                },
                "required": ["_platformFee"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the platform fee setting was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/setStakingContract": {
      "post": {
        "summary": "Call DTAIOCGame.setStakingContract",
        "description": "Set the address of the staking contract associated with the DTAIOCGame contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "_stakingContract": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the staking contract."
                  }
                },
                "required": ["_stakingContract"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the staking contract setting was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/stakingContract": {
      "get": {
        "summary": "Call DTAIOCGame.stakingContract",
        "description": "Retrieve the address of the staking contract associated with the DTAIOCGame contract.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "stakingContract": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "description": "The address of the associated staking contract."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/transferOwnership": {
      "post": {
        "summary": "Call DTAIOCGame.transferOwnership",
        "description": "Transfer ownership of the DTAIOCGame contract to a new owner (only callable by the current owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newOwner": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the new owner."
                  }
                },
                "required": ["newOwner"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the ownership transfer was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/updateGameStatus": {
      "post": {
        "summary": "Call DTAIOCGame.updateGameStatus",
        "description": "Update the status of a game in the DTAIOCGame contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gameId": {
                    "type": "string",
                    "description": "The ID of the game (uint256)."
                  },
                  "status": {
                    "type": "integer",
                    "description": "The new status of the game (uint8)."
                  }
                },
                "required": ["gameId", "status"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the game status update was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/createGame": {
      "post": {
        "summary": "Call DTAIOCGame.createGame",
        "description": "Create a new game in the DTAIOCGame contract with specified parameters.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "creator": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the game creator."
                  },
                  "stakeAmount": {
                    "type": "string",
                    "description": "The amount of tokens required to stake for the game (uint256)."
                  },
                  "playersLimit": {
                    "type": "string",
                    "description": "The maximum number of players allowed (uint256)."
                  },
                  "duration": {
                    "type": "string",
                    "description": "The duration of the game in seconds (uint256)."
                  }
                },
                "required": ["creator", "stakeAmount", "playersLimit", "duration"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the game creation was successful."
                    },
                    "gameId": {
                      "type": "string",
                      "description": "The ID of the created game (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/endGame": {
      "post": {
        "summary": "Call DTAIOCGame.endGame",
        "description": "End a game and distribute rewards in the DTAIOCGame contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gameId": {
                    "type": "string",
                    "description": "The ID of the game (uint256)."
                  },
                  "winners": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$"
                    },
                    "description": "Array of winner addresses."
                  },
                  "ranks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of ranks for the winners (uint256)."
                  }
                },
                "required": ["gameId", "winners", "ranks"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the game ending and reward distribution were successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/joinGame": {
      "post": {
        "summary": "Call DTAIOCGame.joinGame",
        "description": "Join an existing game by staking the required amount in the DTAIOCGame contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gameId": {
                    "type": "string",
                    "description": "The ID of the game to join (uint256)."
                  },
                  "player": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the player joining."
                  }
                },
                "required": ["gameId", "player"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if joining the game was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/pause": {
      "post": {
        "summary": "Call DTAIOCGame.pause",
        "description": "Pause the DTAIOCGame contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the pause was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/paused": {
      "get": {
        "summary": "Call DTAIOCGame.paused",
        "description": "Check if the DTAIOCGame contract is paused.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "paused": {
                      "type": "boolean",
                      "description": "Indicates if the contract is paused."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/unpause": {
      "post": {
        "summary": "Call DTAIOCGame.unpause",
        "description": "Unpause the DTAIOCGame contract (only callable by the owner).",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "required": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the unpause was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/getGameDetails": {
      "get": {
        "summary": "Call DTAIOCGame.getGameDetails",
        "description": "Retrieve details of a specific game in the DTAIOCGame contract.",
        "parameters": [
          {
            "in": "query",
            "name": "gameId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the game (uint256)."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "creator": {
                      "type": "string",
                      "pattern": "^0x[a-fA-F0-9]{40}$",
                      "description": "The address of the game creator."
                    },
                    "stakeAmount": {
                      "type": "string",
                      "description": "The amount of tokens required to stake (uint256)."
                    },
                    "playersLimit": {
                      "type": "string",
                      "description": "The maximum number of players (uint256)."
                    },
                    "duration": {
                      "type": "string",
                      "description": "The duration of the game in seconds (uint256)."
                    },
                    "status": {
                      "type": "integer",
                      "description": "The status of the game (uint8)."
                    },
                    "playerCount": {
                      "type": "string",
                      "description": "The current number of players (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/getGamePlayers": {
      "get": {
        "summary": "Call DTAIOCGame.getGamePlayers",
        "description": "Retrieve the list of players in a specific game in the DTAIOCGame contract.",
        "parameters": [
          {
            "in": "query",
            "name": "gameId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the game (uint256)."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "players": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^0x[a-fA-F0-9]{40}$"
                      },
                      "description": "Array of player addresses."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/getPlayerGames": {
      "get": {
        "summary": "Call DTAIOCGame.getPlayerGames",
        "description": "Retrieve the list of game IDs a player is participating in within the DTAIOCGame contract.",
        "parameters": [
          {
            "in": "query",
            "name": "player",
            "schema": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "required": true,
            "description": "The address of the player."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "gameIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Array of game IDs the player is participating in (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/forfeitGame": {
      "post": {
        "summary": "Call DTAIOCGame.forfeitGame",
        "description": "Forfeit a game, allowing a player to exit and forfeit their stake in the DTAIOCGame contract.",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "gameId": {
                    "type": "string",
                    "description": "The ID of the game (uint256)."
                  },
                  "player": {
                    "type": "string",
                    "pattern": "^0x[a-fA-F0-9]{40}$",
                    "description": "The address of the player forfeiting."
                  }
                },
                "required": ["gameId", "player"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the forfeit was successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/getGameWinners": {
      "get": {
        "summary": "Call DTAIOCGame.getGameWinners",
        "description": "Retrieve the list of winners and their ranks for a specific game in the DTAIOCGame contract.",
        "parameters": [
          {
            "in": "query",
            "name": "gameId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the game (uint256)."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "winners": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^0x[a-fA-F0-9]{40}$"
                      },
                      "description": "Array of winner addresses."
                    },
                    "ranks": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "Array of ranks for the winners (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/contract/0x15C905E6bA9F16E5F3f3B7B66B90F9CAaC5F0A1B/getGameStatus": {
      "get": {
        "summary": "Call DTAIOCGame.getGameStatus",
        "description": "Retrieve the status of a specific game in the DTAIOCGame contract.",
        "parameters": [
          {
            "in": "query",
            "name": "gameId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the game (uint256)."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "The status of the game (uint8)."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/questions/generate": {
      "post": {
        "summary": "Generate trivia questions from tweets",
        "description": "Generates trivia questions based on provided tweets using an AI model.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tweets": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "text": { "type": "string" }
                      }
                    },
                    "description": "Array of tweet objects"
                  }
                },
                "required": ["tweets"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "questions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "question": { "type": "string" },
                          "options": {
                            "type": "array",
                            "items": { "type": "string" }
                          },
                          "correctAnswer": { "type": "string" }
                        }
                      },
                      "description": "Array of generated questions"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid input" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/mint": {
      "post": {
        "summary": "Call DTAIOCToken.mint",
        "description": "Mint a specified amount of tokens to the caller’s address in the DTAIOCToken contract.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "string",
                    "description": "The amount of tokens to mint (uint256)."
                  }
                },
                "required": ["amount"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the minting was successful."
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid input" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Welcome endpoint",
        "description": "Returns a welcome message for the DTriviaAIOnChain API.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": { "type": "string", "example": "Welcome to DTriviaAIOnChain API" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contract/0xB0f1D7Cf1821557271C01F2e560d3B397Fe9ed3c/balanceOf": {
      "get": {
        "summary": "Call DTAIOCToken.balanceOf",
        "description": "Retrieve the token balance of a specified address in the DTAIOCToken contract.",
        "parameters": [
          {
            "in": "query",
            "name": "owner",
            "schema": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$" },
            "required": true,
            "description": "The address to check the balance for."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balance": {
                      "type": "string",
                      "description": "The token balance (uint256)."
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid input" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/basenames/link": {
      "post": {
        "summary": "Fetch tweets for a Twitter username",
        "description": "Fetches recent tweets for a given Twitter username using the X API.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": { "type": "string", "description": "Twitter username" }
                },
                "required": ["username"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" },
                          "text": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid input" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/questions/backup": {
      "get": {
        "summary": "Retrieve backup questions",
        "description": "Fetches pre-stored backup questions.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "questions": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "question": { "type": "string" },
                          "options": { "type": "array", "items": { "type": "string" } },
                          "correctAnswer": { "type": "string" }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": { "description": "Server error" }
        }
      }
    },
    "/games": {
      "post": {
        "summary": "Create a new trivia game",
        "description": "Creates a new game in the DTAIOCGame contract with specified parameters and associates it with a Twitter username.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": { "type": "string", "description": "Twitter username" },
                  "creator": { "type": "string", "pattern": "^0x[a-fA-F0-9]{40}$", "description": "Creator address" },
                  "stakeAmount": { "type": "string", "description": "Stake amount (uint256)" },
                  "playersLimit": { "type": "string", "description": "Max players (uint256)" },
                  "duration": { "type": "string", "description": "Game duration in seconds (uint256)" }
                },
                "required": ["username", "creator", "stakeAmount", "playersLimit", "duration"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "gameId": { "type": "string", "description": "ID of the created game" }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid input" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/contract/{contractAddress}/balanceOf": {
      "get": {
        "summary": "Get token balance for an address",
        "parameters": [
          {
            "in": "path",
            "name": "contractAddress",
            "required": true,
            "schema": { "type": "string" }
          },
          {
            "in": "query",
            "name": "address",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Token balance",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "balance": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid address" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/basenames/resolve": {
      "get": {
        "summary": "Resolve basename for an address",
        "parameters": [
          {
            "in": "query",
            "name": "address",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Basename",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "basename": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid address" },
          "404": { "description": "No basename found" },
          "500": { "description": "Server error" }
        }
      }
    },
    "/basenames/twitter": {
      "get": {
        "summary": "Get Twitter username for an address",
        "parameters": [
          {
            "in": "query",
            "name": "address",
            "required": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Twitter username",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": { "type": "string" }
                  }
                }
              }
            }
          },
          "400": { "description": "Invalid address" },
          "404": { "description": "No Twitter username found" },
          "500": { "description": "Server error" }
        }
      }
    }
  }
}
  
  